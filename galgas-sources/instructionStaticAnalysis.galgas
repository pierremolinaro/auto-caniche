
refclass @assignmentDecoratedInstruction : @decoratedInstruction {
  public var @unifiedScalarTypeMap-entry mTargetTypeProxy
  public var @lstring mTargetVarName
  public var @decoratedAssignmentSourceExpression mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifDecoratedInstruction : @decoratedInstruction {
  public var @location mIFinstructionLocation
  public var @decoratedExpression mTestExpression
  public var @location mEndOfTestExpression
  public var @decoratedInstructionList mThenInstructionList
  public var @decoratedInstructionList mElseInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#list @switchDecoratedCaseList {
#  @lstringlist mConstantNameList
#  @decoratedInstructionList mInstructionList
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#shared class @switchDecoratedInstruction : @decoratedInstruction {
#  @lstring mVarName
#  @switchDecoratedCaseList mSwitchDecoratedCaseList
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


refclass @assertDecoratedInstruction : @decoratedInstruction {
  public var @location mInstructionLocation
  public var @decoratedExpression mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


method @instructionList analyzeInstructionList
  ?let @analyzeContext inAnalyzeContext
  !@decoratedInstructionList outDecoratedInstructionList {
  outDecoratedInstructionList = @decoratedInstructionList.default
  for i in self do
    [i.mInstruction analyzeInstruction
      !inAnalyzeContext
      ?let @decoratedInstruction decoratedInstruction
    ]
    outDecoratedInstructionList += !decoratedInstruction
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


abstract refclass @decoratedAssignmentSourceExpression {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


refclass @attributeInDecoratedAssignmentSourceExpression : @decoratedAssignmentSourceExpression {
  public var @lstring mVarName
#  @uint mBDDStartIndex ;
#  @uint mBDDBitCount ;
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


refclass @cstInDecoratedAssignmentSourceExpression : @decoratedAssignmentSourceExpression {
  public var @lstring mEnumCstName
  public var @uint mValue
  public var @uint mBDDBitCount
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


refclass @functionInDecoratedAssignmentSourceExpression : @decoratedAssignmentSourceExpression {
  public var @lstring mFunctionName
  public var @lstring mOperandName
  public var @decoratedFunctionValueList mDecoratedFunctionValueList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


abstract method @instruction analyzeInstruction
  ?let @analyzeContext inAnalyzeContext
  !@decoratedInstruction outDecoratedInstruction

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


abstract method @assignmentSourceExpression analyzeAssignmentSourceExpression
  ?let @analyzeContext inAnalyzeContext
  ?let @unifiedScalarTypeMap-entry inTargetTypeProxy
  !@decoratedAssignmentSourceExpression outDecoratedExpression

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


override method @varAsAssignmentSourceExpression analyzeAssignmentSourceExpression
  ?let @analyzeContext inAnalyzeContext
  ?let @unifiedScalarTypeMap-entry inTargetTypeProxy
  !@decoratedAssignmentSourceExpression outDecoratedExpression {
  [inAnalyzeContext.mMachineVarMap searchKey
    !self.mSourceVarName
    ?let @unifiedScalarTypeMap-entry sourceTypeProxy
    ?*
  ]
#--- Check type
  if [inTargetTypeProxy key] != [sourceTypeProxy key] then
    error self.mSourceVarName:
      "var type is '" + [inTargetTypeProxy key] +
      "', and is different from right expression type '" +
      [sourceTypeProxy key] + "'"
  end
  outDecoratedExpression = @attributeInDecoratedAssignmentSourceExpression. new {
    !self.mSourceVarName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


override method @constantAsAssignmentSourceExpression analyzeAssignmentSourceExpression
  ?let @analyzeContext unused inAnalyzeContext
  ?let @unifiedScalarTypeMap-entry inTargetTypeProxy
  !@decoratedAssignmentSourceExpression outDecoratedExpression {
  [[inTargetTypeProxy mConstantMap] searchKey !self.mConstantName ?let @uint cstValue]
  outDecoratedExpression = @cstInDecoratedAssignmentSourceExpression. new {
    !self.mConstantName
    !cstValue
    ![[[inTargetTypeProxy mConstantMap] count] - 1 significantBitCount]}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


override method @functionAsAssignmentSourceExpression analyzeAssignmentSourceExpression
  ?let @analyzeContext inAnalyzeContext
  ?let @unifiedScalarTypeMap-entry inTargetTypeProxy
  !@decoratedAssignmentSourceExpression outDecoratedExpression {
#--- Search function name in function map
  [inAnalyzeContext.mFunctionMap searchKey
    !self.mFunctionName
    ?let @unifiedScalarTypeMap-entry operandTypeProxy
    ?let @unifiedScalarTypeMap-entry resultTypeProxy
    ?let @decoratedFunctionValueList decoratedFunctionValueList
  ]
#--- Search attribute in attribute map
  [inAnalyzeContext.mMachineVarMap searchKey
    !self.mOperandName
    ?let @unifiedScalarTypeMap-entry attributeTypeProxy
#    ??@uint attributeBDDStartIndex
#    ??@uint attributeBDDBitCount
    ?* # ??@uint operandMaxValue
  ]
#--- Check attribute type versus function operand type
  if [operandTypeProxy key] != [attributeTypeProxy key] then
    error self.mOperandName : "the '" + self.mOperandName
      + "' belongs to the '%" + [attributeTypeProxy key]
      + "', but '" + self.mFunctionName + "' function requires an '%"
      + [operandTypeProxy key] + "' type"
  end
#--- Check type
  if [inTargetTypeProxy key] != [resultTypeProxy key] then
    error self.mOperandName:
      "var type is '" + [inTargetTypeProxy key] +
      "', and is different from function result type '" +
      [resultTypeProxy key] + "'"
  end
#---
  outDecoratedExpression = @functionInDecoratedAssignmentSourceExpression. new {
    !self.mFunctionName
    !self.mOperandName
    !decoratedFunctionValueList}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


override method @assignmentInstruction analyzeInstruction
  ?let @analyzeContext inAnalyzeContext
  !@decoratedInstruction outDecoratedInstruction {
  [inAnalyzeContext.mMachineVarMap searchKey
    !self.mTargetVarName
    ?let @unifiedScalarTypeMap-entry targetTypeProxy
    ?*
   ]
  [self.mSourceExpression analyzeAssignmentSourceExpression
    !inAnalyzeContext
    !targetTypeProxy
    ?let @decoratedAssignmentSourceExpression decoratedExpression
  ]
  outDecoratedInstruction = @assignmentDecoratedInstruction. new {
    !targetTypeProxy
    !self.mTargetVarName
    !decoratedExpression}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @switchInstruction analyzeInstruction
#  ?let @analyzeContext inAnalyzeContext
#  !@decoratedInstruction outDecoratedInstruction
#{
##--- Analyze variable
#  [inAnalyzeContext.mMachineVarMap searchKey
#    !self.mVariableName
#    ?let @unifiedScalarTypeMap-entry variableTypeProxy
#    ?*
#  ]
##--- Analyze case list
#  @switchDecoratedCaseList switchDecoratedCaseList = {}
#  @stringset usedConstantNameSet = {}
#  for (constantList * instructionList) in self.mSwitchCaseList do
#    for (constantName) in constantList do
#      [[variableTypeProxy mConstantMap] searchKey !constantName ?*]
#      if [usedConstantNameSet hasKey !constantName] then
#        error constantName : "duplicated constant"
#      end
#      usedConstantNameSet += !constantName
#    end
#    [instructionList analyzeInstructionList
#      !inAnalyzeContext
#      ?let @decoratedInstructionList decoratedInstructionList
#    ]
#    switchDecoratedCaseList += !constantList !decoratedInstructionList
#  end
##--- Check all constant have been named
#  let missingConstantSet = [[variableTypeProxy mConstantMap] keySet] - usedConstantNameSet
#  for (constantName) in missingConstantSet do
#    error self.mEndOfSwitchExpression : "missing constant '" + constantName + "' in switch instruction"
#  end
##--- Generate instruction
#  outDecoratedInstruction = @switchDecoratedInstruction.new {
#    !self.mVariableName
#    !switchDecoratedCaseList
#  }
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstruction analyzeInstruction
  ?let @analyzeContext inAnalyzeContext
  !@decoratedInstruction outDecoratedInstruction
{
  [self.mTestExpression analyzeExpression
    !inAnalyzeContext
    !false
    ?let @decoratedExpression decoratedExpression
  ]
  [self.mThenInstructionList analyzeInstructionList
    !inAnalyzeContext
    ?let @decoratedInstructionList decoratedThenInstructionList
  ]
  [self.mElseInstructionList analyzeInstructionList
    !inAnalyzeContext
    ?let @decoratedInstructionList decoratedElseInstructionList
  ]
  outDecoratedInstruction = @ifDecoratedInstruction. new {
    !self.mIFinstructionLocation
    !decoratedExpression
    !self.mEndOfTestExpression
    !decoratedThenInstructionList
    !decoratedElseInstructionList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


override method @assertInstruction analyzeInstruction
  ?let @analyzeContext inAnalyzeContext
  !@decoratedInstruction outDecoratedInstruction {
  [self.mAssertExpression analyzeExpression
    !inAnalyzeContext
    !false
    ?let @decoratedExpression decoratedExpression
  ]
  outDecoratedInstruction = @assertDecoratedInstruction. new {
    !self.mAssertInstructionLocation
    !decoratedExpression}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————



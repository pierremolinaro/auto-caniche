
enum $couleur {vert, orange, rouge}

#--------------------------------------------------------*

function succ $couleur -> $couleur
  vert : orange
  orange : rouge
  rouge : vert
}

#--------------------------------------------------------*

enum $etat {hs, es}

#--------------------------------------------------------*

machine @carrefour

  var etat $etat = .hs
  var feuA $couleur = .orange
  var feuB $couleur = .orange

  invariant "1" : (etat == .hs) -> ((feuA == .orange) & (feuB == .orange))
  invariant "2" : (etat == .es) -> (((feuA == .rouge) | (feuB == .rouge)) & (feuA != feuB))

  event miseEnService () {
    if etat == .hs {
      etat = .es
      feuA = .vert
      feuB = .rouge
    }
#    switch etat {
#    case .hs:
#      etat = .es
#      feuA = .vert
#      feuB = .rouge
#    case .es:
#    }
  ensures
    "A" : (etat == .es)
  }

  event miseHorsService () {
    if etat == .es {
      etat = .hs
      feuA = .orange
      feuB = .orange
    }
  ensures
    "A" : (etat == .hs)
  }

  event tick () {
    if (etat == .es) {
      if (feuA == .vert) {
        feuA = .orange
      }else if (feuA == .orange) {
        feuA = .rouge
        feuB = .vert
      }else if (feuB == .vert) {
        feuB = .orange
      }else{
        feuA = .vert
        feuB = .rouge
      }
    }
  ensures
 #  "A" :  (etat == es) -> (feuA == succ (old feuA)) | (feuB == succ (old feuB))
   "B" :  (etat == .hs) -> ((feuA == old feuA) & (feuB == old feuB))
   "C" :  (etat == old etat)
  }

}

#--------------------------------------------------------*

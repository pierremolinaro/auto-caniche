
enum $position {droite, gauche, milieu, inconnue}

enum $commande {droite, gauche, milieu, stop}

#------------------------------------------------------------------------------*

machine @controleAiguille
  var positionCapteur $position = .inconnue
  var positionLogique $position = .inconnue
  var souhait $commande = .stop
  var commande $commande = .stop
  
  invariant "1" : (souhait == .stop) -> (commande == .stop)
  invariant "2" : (souhait == .stop) -> (positionCapteur == positionLogique)
  
  invariant "3" : (positionLogique == .inconnue) | (positionLogique == positionCapteur)
  
  invariant "4" : ((souhait == .droite) & (positionCapteur != .droite)) -> (commande == .droite)
  invariant "5" : ((souhait == .milieu) & (positionCapteur != .milieu)) -> (commande == .milieu)
  invariant "6" : ((souhait == .gauche) & (positionCapteur != .gauche)) -> (commande == .gauche)
  
  invariant "7" : ((commande == .droite) & (positionCapteur == .droite)) -> (positionLogique == .droite)
  invariant "8" : ((commande == .gauche) & (positionCapteur == .gauche)) -> (positionLogique == .gauche)
  invariant "9" : ((commande == .milieu) & (positionCapteur == .milieu)) -> (positionLogique == .milieu)
  
  invariant "10" : ((commande == .droite) & (positionCapteur != .droite)) -> (positionLogique != .droite)
  invariant "11" : ((commande == .gauche) & (positionCapteur != .gauche)) -> (positionLogique != .gauche)
  invariant "12" : ((commande == .milieu) & (positionCapteur != .milieu)) -> (positionLogique != .milieu)
  
  invariant "13" : (commande == .stop) -> (positionCapteur == positionLogique)

  event nouvellePosition (?inPosition $position) {
    positionCapteur = inPosition
    if (souhait == .stop) {
      positionLogique = inPosition
    }else if (positionCapteur == .droite) {
      positionLogique = .droite
      if (souhait == .milieu) {
        commande = .milieu
      }else if (souhait == .gauche) {
        commande = .gauche
      }else{
        assert (souhait == .droite)
      } 
      assert (souhait == commande) -> ((positionLogique == .inconnue) | (positionLogique == positionCapteur))
    }else if (positionCapteur == .gauche) {
      positionLogique = .gauche
      if (souhait == .milieu) {
        commande = .milieu
      }else if (souhait == .droite) {
        commande = .droite
      }else{
        assert (souhait == .gauche)
      }
      assert (souhait == commande) -> ((positionLogique == .inconnue) | (positionLogique == positionCapteur))
    }else if (positionCapteur == .milieu) {
      if (souhait == .gauche) {
        commande = .gauche
      }else if (souhait == .droite) {
        commande = .droite
      } 
      positionLogique = .milieu
      assert (souhait == commande) -> ((positionLogique == .inconnue) | (positionLogique == positionCapteur))
    }else{
      assert (positionCapteur == .inconnue)
      positionLogique = .inconnue
      commande = souhait
      assert (souhait == commande) -> ((positionLogique == .inconnue) | (positionLogique == positionCapteur))
    }
  ensures
    "A" : (souhait == old souhait)
  }

  event souhaitCommande (?inSouhait $commande) {
    souhait = inSouhait
    if (souhait == .stop) {
      commande = .stop
      positionLogique = positionCapteur
    }else if (souhait == .droite) & (positionCapteur != .droite) {
      commande = .droite
      positionLogique = .inconnue
    }else if (souhait == .gauche) & (positionCapteur != .gauche) {
      commande = .gauche
      positionLogique = .inconnue
    }else if (souhait == .milieu) & (positionCapteur != .milieu) {
      commande = .milieu
      positionLogique = .inconnue
    }
  ensures
    "A" : positionCapteur == old positionCapteur
  }
}

#--------------------------------------------------------*

scenario @controleAiguille "sequence" {
 nouvellePosition (!droite)
 nouvellePosition (!droite)
 souhaitCommande (!droite)
 souhaitCommande (!droite)
 souhaitCommande (!gauche)
 nouvellePosition (!droite)
 nouvellePosition (!milieu)
 nouvellePosition (!gauche)
}

#--------------------------------------------------------*

scenario @controleAiguille "md avec retour" {
 nouvellePosition (!droite)
 souhaitCommande (!droite)
 souhaitCommande (!gauche)
 souhaitCommande (!droite)
 nouvellePosition (!milieu)
 nouvellePosition (!droite)
}

#--------------------------------------------------------*
